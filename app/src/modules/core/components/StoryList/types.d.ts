export interface StoryListProps {
  /**
   * A list of stories to render in the story list.
   */
  stories?: Array<StoryCardProps>;

  /**
   * Render a list of story cards.
   */
  children?: StoryCard | Array<StoryCard>;

  /**
   * Hide the welcome card when the list is empty.
   */
  hideEmptyWelcome?: boolean;

  /**
   * Customise the weclome card that is shown if the
   * list is empty. This will still be hidden if the
   * `hideEmptyWelcome` prop is `true`.
   */
  welcome?: StoryCard;
}

export interface StoryCardProps {
  /**
   * The title to display on the card.
   */
  title?: string;

  /**
   * The subtitle to display on the card.
   */
  subtitle?: string;

  /**
   * The icon of the app that this InfoCard was generated by.
   * If no icon is given, no icon button will be generated.
   */
  appIcon?: React.ReactElement;

  /**
   * A link that the icon button will link to. If no link is
   *  given, the app icon button will be disabled.
   */
  appLink?: string;

  /**
   * If given an `onClick` handler, the entire card will be a
   * clickable and the handler will be executed when the card
   * is clicked.
   */
  onClick?: () => void;

  /**
   * The tooltip to show when the user hovers over the app icon
   * button. If no tooltip is given, no tooltip will be shown.
   */
  appTooltip?: string;

  /**
   * The elements to render in the card's action area. This
   * should be some sort of button.
   */
  action?: React.ReactElement;

  /**
   * This prop can be given a function which should open a menu.
   * This function will be called when the 'more' button is pressed.
   * If no function is given, the 'more' button will not be shown.
   */
  openMoreMenu?: (event: React.MouseEvent<HTMLButtonElement>) => any;

  /**
   * The children are rendered in the content area of the card.
   * The content area is limited to a specific height with the
   * overflow property set to `scroll`.
   */
  children?: JSX.Element | JSX.Element[] | string;
}
