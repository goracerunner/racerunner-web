rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    //
    // Helper functions
    //

    // Type checks
    function isString(field) { return request.resource.data[field] is string }
    function isNumber(field) { return request.resource.data[field] is number }
    function isInt(field) { return request.resource.data[field] is int }
    function isFloat(field) { return request.resource.data[field] is float }
    function isBoolean(field) { return request.resource.data[field] is bool }
    function isList(field) { return request.resource.data[field] is list }
    function isMap(field) { return request.resource.data[field] is map }
    function isPath(field) { return request.resource.data[field] is path }
    function isTimestamp(field) { return request.resource.data[field] is timestamp }
    function isDuration(field) { return request.resource.data[field] is duration }
    function isLatlng(field) { return request.resource.data[field] is latlng }

    // Enforce that a field is unchanged
    function unchanged(field) {
    	return request.resource.data[field] == resource.data[field]
		}

    // Enforce that a request has all the specified fields
    function fields(keys) {
      return request.resource.data.keys().hasAll(keys)
    }

    // Retrieve the current data in the requested data
    function data() {
      return resource.data
    }

    // Retrieve the new data that will be written to the document
    function newData() {
      return request.resource.data
    }


    // 
    // Claims
    //

    // Enforce that the user has the specified claim
    function hasClaim(claim) {
      return claim in request.auth.token.keys() && request.auth.token[claim] == true
    }

    function hasClaimAdmin() { return hasClaim("admin") }
    function hasClaimManager() { return hasClaim("manager") }

    //
    // Access checks
    //

    function loggedIn() {
      return request.auth != null;
    }

    // Enforce that a request was from the user of the specified uid
    function requestFrom(uid) {
      return request.auth.uid == uid
    }

    // Enforce that a list field in the resource contains the requester's uid
    function fieldListsUser(doc) {
      return doc.hasAny([request.auth.uid])
    }

    function getData(path) {
      return get(path("/databases/{database}/documents/" + path).bind({ "database": database })).data
    }

    //
    // Request validations
    //



    //
    // Users
    //

    match /users/{uid} {
      // Allow all users to get public profiles
      allow get: if loggedIn()
      
      // Only allow admins to list all users
      allow list: if loggedIn() && hasClaimAdmin()

      // Only accessible by the owner and admins
      match /protected {
        match /details {
          // Allow read if it is the owner or an admin
          allow get: if loggedIn() &&
            (requestFrom(uid) || hasClaimAdmin())
        }
      }

      // Only accessible by admins
      match /private {
        match /claims {
          allow read, write: if loggedIn() && hasClaimAdmin()
        }
      }

      // Allow user to view list of races they are in
      match /races/{raceId} {
        allow read: if loggedIn() && requestFrom(uid)
      }

      match /managedRaces/{raceId} {
        allow read: if loggedIn() && requestFrom(uid) && hasClaimManager()
      }
    }


    //
    // Races
    //

    function isRaceParticipant(raceId) {
      return fieldListsUser(getData("races/" + raceId).participantIds)
    }

    function isRaceManager(raceId) {
      return fieldListsUser(getData("races/" + raceId).managerIds)
    }
    

    match /races/{raceId} {
      // Allow admins to get a race's details
      allow read: if loggedIn() && hasClaimAdmin()

      // Allow a participant/manager to get details about a race they are in
      allow get: if loggedIn() && (isRaceParticipant(raceId) || isRaceManager(raceId))

      // Allow admins to create races
      // TODO: add data shape checking
      allow create: if loggedIn() && hasClaimAdmin()

      // Allow managers and admins to modify a race
      // TODO: add data shape checking
      allow update: if loggedIn() && (isRaceManager(raceId) || hasClaimAdmin())

      match /registrationFields/{managerId} {
        // Allow all participants to see registration fields
        allow read: if loggedIn() && (isRaceParticipant(raceId) || isRaceManager(raceId))

        // Allow managers to modify registration fields
        allow write: if loggedIn() && isRaceManager(raceId)
      }

      match /registrations/{registrationId} {
        // Allow participants to create a registration once
        // TODO: add data shape checking
        allow create: if loggedIn() && isRaceParticipant(raceId)

        // Allow user to view their own registration
        allow get: if loggedIn() && isRaceParticipant(raceId) && requestFrom(registrationId)

        // Allow all managers to view, update and delete registrations
        allow read, update, delete: if loggedIn() && isRaceManager(raceId)
      }

      match /managers/{managerId} {
        // Allow managers and admins to read managers
        allow read: if loggedIn() && (isRaceManager(raceId) || hasClaimAdmin())

        // Allow admins to manage managers
        allow write: if loggedIn() && hasClaimAdmin()
      }

      match /participants/{participantId} {
        // Allow participants, managers and admins to read participants
        allow read: if loggedIn() && (isRaceParticipant(raceId) || isRaceManager(raceId) || hasClaimAdmin())

        // Allow managers and admins to manage participants
        allow write: if loggedIn() && (isRaceManager(raceId) || hasClaimAdmin())
      }
    }


    //
    // Stats
    //

    match /stats/{stat} {
      // Only allow admins to view stats
      allow read: if loggedIn() && hasClaimAdmin()
    }
  }
}
