service firebase.storage {
  match /b/{bucket}/o {
    
    // 
    // Claims
    //

    // Enforce that the user has the specified claim
    function hasClaim(claim) {
      return claim in request.auth.token.keys() && request.auth.token[claim] == true
    }

    // Enforce that the user has the value listed in the specified claim list
    function hasClaimListed(claim, value) {
      return claim in request.auth.token.keys() && request.auth.token[claim].hasAny([value])
    }
    

    //
    // Access checks
    //

    function loggedIn() {
      return request.auth != null;
    }

    // Enforce that a request was from the user of the specified uid
    function requestFrom(uid) {
      return request.auth.uid == uid
    }

    // Check if the user has the specified race listed in their claims
    function isInRace(raceId) {
      return hasClaimListed('races', raceId) || hasClaimsListed('managedRaces', raceId)
    }

    // Check if the user has the specified race listed in their claims as manager
    function isManagingRace(raceId) {
      return hasClaimsListed('managedRaces', raceId)
    }


    //
    // Rules
    //

    match /static/{paths=**} {
      // Allow anyone to read static files
      allow read: if true

      // Only allow admins to manage static files
      allow write: if loggedIn() && hasClaimAdmin()
    }
    
    match /resources/{raceId}/{paths=**} {
      // Allow race participants to read resources
      allow read: if loggedIn() && isInRace(raceId)

      // Allow race managers to manage resources
      allow write: if loggedIn() && isManagingRace(raceId)
    }
    
    match /responses/{raceId}/{paths=**} {
      // Allow race participants to read and upload responses
      allow read, create: if loggedIn() && isInRace(raceId)

      // Allow race managers to manage responses
      allow write: if loggedIn() && isManagingRace(raceId)
    }
  }
}
